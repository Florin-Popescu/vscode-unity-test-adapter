{
  "name": "vscode-unity-test-adapter",
  "displayName": "C Unity Test Explorer",
  "description": "Run your C unit tests using the Unity framework in the Sidebar of Visual Studio Code",
  "icon": "img/icon.png",
  "author": "Florin Popescu",
  "publisher": "fpopescu",
  "version": "0.0.9",
  "license": "MIT",
  "homepage": "https://github.com/Florin-Popescu/vscode-unity-test-adapter",
  "repository": {
    "type": "git",
    "url": "https://github.com/Florin-Popescu/vscode-unity-test-adapter.git"
  },
  "bugs": {
    "url": "https://github.com/Florin-Popescu/vscode-unity-test-adapter/issues"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "test",
    "testing"
  ],
  "main": "out/main.js",
  "scripts": {
    "clean": "rimraf out *.vsix",
    "build": "tsc",
    "watch": "tsc -w",
    "rebuild": "npm run clean && npm run build",
    "package": "vsce package",
    "publish": "vsce publish"
  },
  "dependencies": {
    "async-mutex": "^0.1.4",
    "child_process": "^1.0.2",
    "tree-kill": "^1.2.2",
    "tsc": "^1.20150623.0",
    "tslib": "^1.14.1",
    "vscode-read-manifest": "^0.5.1",
    "vscode-test-adapter-api": "^1.9.0",
    "vscode-test-adapter-util": "^0.7.1"
  },
  "devDependencies": {
    "@types/node": "^14.17.17",
    "@types/vscode": "~1.23.0",
    "typescript": "^3.9.10",
    "vsce": "^1.99.0"
  },
  "engines": {
    "vscode": "^1.23.0"
  },
  "extensionDependencies": [
    "hbenl.vscode-test-explorer"
  ],
  "activationEvents": [
    "*"
  ],
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Unity Test Explorer",
      "properties": {
        "unityExplorer.debugConfiguration": {
          "markdownDescription": "Configuration to run when debugging tests.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.prettyTestCaseRegex": {
          "markdownDescription": "Regular expression to be used to simplify the test case label which by default is the full function name. Put what you want to keep in the first matching group and the rest will be removed. Leave blank to disable this. E.g. To go from `test_BlinkTaskShouldToggleLed` to `BlinkTaskShouldToggleLed`, regular expression which could be used is `test_(\\w+)`.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.prettyTestFileRegex": {
          "markdownDescription": "Regular expression to be used to simplify the test file label which by default contains the relative path to the file as well as its extension. Put what you want to keep in the first matching group and the rest will be removed. Leave blank to disable this. E.g. To go from `test/LEDs/test_BlinkTask.c` to `BlinkTask`, regular expression which could be used is `test_(\\w+)\\.c`.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.unitUnderTestFolder": {
          "markdownDescription": "The path the extension should use to look for the unit under test source files. By default the workspace root is used.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.unitUnderTestFileRegex": {
          "markdownDescription": "Regular expression against which unit under test source files should match. These are tracked for changes to mark test results as old if not re-run.",
          "type": "string",
          "default": "\\w+\\.[ch]",
          "scope": "resource"
        },
        "unityExplorer.testSourceFolder": {
          "markdownDescription": "The path the extension should use to look for the unit test source files. By default the workspace root is used.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.testSourceFileRegex": {
          "markdownDescription": "Regular expression against which test source files should match.",
          "type": "string",
          "default": "test_",
          "scope": "resource"
        },
        "unityExplorer.testCaseRegex": {
          "markdownDescription": "Regular expression against which test cases in a file should match. The actual test case name must be put in the first matching group.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.preBuildCommand": {
          "markdownDescription": "Any command which must be run before building the unit tests. If empty, no command will be run.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.testBuildApplication": {
          "markdownDescription": "Application used to build the tests (e.g. `make`, `cmake`, `gcc`). A test will be built by running this with the `testBuildTargetRegex` as build target (e.g. `make unitTest.exe`).",
          "type": "string",
          "default": "make",
          "scope": "resource"
        },
        "unityExplorer.testBuildCwdPath": {
          "markdownDescription": "The current working directory where the build command will be run in. By default the workspace root is used.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.testBuildArgs": {
          "markdownDescription": "Any additional arguments that need to be passed to the build command when building a test. Note that the target to be built is passed separately, so there is no need to add it here.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.testBuildTargetRegex": {
          "markdownDescription": "Regular expression which should be applied to the test source file name (without extension) to produce a target for the build system. A `$1` will be replaced with the file name. By default just the source file name without extension will be used (e.g. for `test/unitTest.c`, `make unitTest` will be called).",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.testExecutableLauncher": {
          "markdownDescription": "Launcher command used to start the test executable file",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.testExecutableRegex": {
          "markdownDescription": "Regular expression which should be applied to the test source file name (without extension) to produce the executable file name to run the test. A `$1` will be replaced with the file name. By default just the source file name without extension will be used (e.g. for `test/unitTest.c`, `unitTest` will be ran).",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.testExecutableArgs": {
          "markdownDescription": "Any additional arguments that need to be passed to the test executable when running it.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.testExecutableArgSingleCaseRegex": {
          "markdownDescription": "Regular expression which should be applied to a test case (not the pretty-fied label) and passed as argument to the test executable to only run that test case. This speeds up execution when a single test case of a large file is needed to be run. A `$1` will be replaced with the test case name. By default all the file's test cases are run even if a single test case is run from the interface.",
          "type": "string",
          "scope": "resource"
        }
      }
    }
  }
}
